version: "3.8"
services:
  product:
    build: microservices/product-service
    mem_limit: 350m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  recommendation:
    build: microservices/recommendation-service
    mem_limit: 350M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  review:
    build: microservices/review-service
    mem_limit: 350M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  product-composite:
    build: microservices/product-composite-service
    mem_limit: 350M
    ports:
      - '7004:7004'
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      rabbitmq:
        condition: service_healthy

  # $ mongo
  mongodb:
    image: mongo:latest
    mem_limit: 350M
    ports:
      - '27017:27017'
    command: mongod
    healthcheck:
      test: "mongo --eval  'db.stats().ok'"
      interval: 10s
      timeout: 5s
      retries: 10

  # $ mysql -u root -h 127.0.0.1 -p
  mysql:
    image: mysql:5.7
    mem_limit: 350M
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 'absolute'
      MYSQL_DATABASE: 'review-db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'pwd'
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-uuser", "-ppwd", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management
    mem_limit: 350M
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: 'adminuser'
      RABBITMQ_DEFAULT_PASS: 'adminuser'
    healthcheck:
      test: [ "CMD", "rabbitmqctl","status" ]
      interval: 10s
      timeout: 5s
      retries: 10


